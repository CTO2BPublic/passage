{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#what-is-passage","title":"What is Passage?","text":"<p>Passage Server is a powerful, open-source access control management solution built in Go. It provides a centralized portal for managing and automating role-based access across multiple platforms and cloud services. Designed with flexibility and scalability in mind.</p> <p></p>"},{"location":"#why-passage","title":"Why Passage?","text":"<ul> <li>Open Source: Free and community-driven.</li> <li>Go-Powered: Efficient and performant.</li> <li>Modular: Easily extendable with new providers.</li> </ul>"},{"location":"#getting-started","title":"Getting started","text":""},{"location":"#quick-start","title":"Quick start","text":""},{"location":"#how-it-works","title":"How it works","text":"<ol> <li>Define Roles: Create roles that map to specific groups on various platforms.</li> <li>Request Access: Users can request access through the Passage Server portal.</li> <li>Grant &amp; Revoke: Access can be granted for a limited time and automatically revoked upon expiration.</li> <li>Multiple Providers: Use different identity providers (e.g., AWS IAM, GitLab, Google Workspace) through a standardized provider interface.</li> </ol>"},{"location":"#use-cases","title":"Use Cases","text":"<ul> <li> <p>Engineering Teams: Manage temporary access for developers across multiple cloud platforms.</p> </li> <li> <p>Security Compliance: Enforce least-privilege access with automatic revocation.</p> </li> <li> <p>Multi-Cloud Management: Simplify role management across diverse platforms.</p> </li> </ul>"},{"location":"#architecture","title":"Architecture","text":""},{"location":"#features","title":"Features","text":"<ul> <li> <p>Unified Access Management: Manage roles and permissions across multiple platforms like AWS, Google Workspace, and GitLab from a single portal.</p> </li> <li> <p>Provider Interface: Leverage a modular provider system to extend support for various identity platforms easily.</p> </li> <li> <p>Role Mapping: Define roles (e.g., <code>pu-user</code>) that map to multiple groups across different platforms.</p> </li> <li> <p>Temporary Access: Grant time-limited access with automatic expiration to reduce over-permissioning.</p> </li> <li> <p>User-Friendly Portal: Web-based portal displaying available roles and their corresponding access mappings.</p> </li> <li> <p>Scalable &amp; Secure: Built in Go for high performance and designed with secure best practices.</p> </li> </ul>"},{"location":"configuration/Config%20file/","title":"Config file","text":""},{"location":"configuration/Config%20file/#overview","title":"Overview","text":"<p>Configuration file consists of couple main parts</p> <pre><code>swagger:\n  host: localhost:8080\n\nauth:\n  oidc:\n    enabled: false\n    issuerUrl: https://dex.exampleorg.com\n    clientId: passage-server\n  jwt:\n    enabled: true\n    tokenHeader: Authorization\n    # headerPrefix: \"\"\n    usernameClaim: username\n    groupsClaim: roles\n    # providerUsernamesClaim: \"traits\"\n    jwksurl: https://teleport.exampleorg.com/.well-known/jwks.json\n    issuer: teleport.exampleorg.com\n\ntracing:\n  enabled: false\n  connectionType: grpc\n  url: localhost:4317\n  # connectionType: http\n  # url: http://localhost:43318\n  serviceName: passage-server\n  environmentName: examplecluster\n\nlog:\n  level: info\n  pretty: true\n  caller: true\n\ndb:\n  engine: sqlite\n  filename: gorm.db\n\n  # # mySQL\n  # engine: mysql\n  # mysql:\n  #   host: 127.0.0.1\n  #   port: 3306\n  #   username: admin\n  #   password: changeme\n  #   database: passage\n\n  # # PSQL\n  # engine: psql\n  # mysql:\n  #   host: 127.0.0.1\n  #   port: 5432\n  #   username: admin\n  #   password: changeme\n  #   database: passage\n  #   schema: public\n\n# Credentials which can be refferenced inside the providers\ncreds:\n  gitlab:\n    data:\n      # env PASSAGE_CREDS_GITLAB_DATA_TOKEN\n  google:\n    data:\n      credentialsfile: creds/google-sa.json\n  teleport:\n    data:\n      credentialsfile: creds/teleport-identity-file\n      hostname: teleport.exampleorg.com\n\napprovalRules:\n  - name: SRE approvers\n    users:\n      - Default user\n    groups:\n      - passage-sre-approvers\n\nroles:\n  - name: SRE Power User Access\n    description: Privilleged access. Provides PU access to Gitlab, Teleport, Google and AWS\n    approvalRuleRef:\n      name: SRE approvers\n    tags:\n      - sre\n    providers:\n      - name: GitlabSrePu\n        provider: gitlab\n        runAsync: true\n        credentialRef:\n          name: gitlab\n        parameters:\n          group: exampleorg/pu-group\n          level: Owner\n\n      - name: AwsPu\n        provider: aws\n        runAsync: true\n        credentialRef:\n          name: aws\n        parameters:\n          group: pu-group\n\n      - name: GooglePu\n        provider: google\n        runAsync: true\n        credentialRef:\n          name: google\n        parameters:\n          group: pu-access@exampleorg.com\n\n      - name: TeleportPu\n        provider: teleport\n        runAsync: true\n        credentialRef:\n          name: teleport\n        parameters:\n          group: pu-role\n\n  - name: SRE Read Only\n    description: Non privilleged access. Provides RO access to Gitlab, Teleport, Google and AWS\n    approvalRuleRef:\n      name: SRE approvers\n    tags:\n      - sre\n    providers:\n      - name: GitlabRo\n        provider: gitlab\n        credentialRef:\n          name: gitlab\n        parameters:\n          group: exampleorg/ro-group\n          level: Owner\n\n      - name: AwsRo\n        provider: aws\n        credentialRef:\n          name: aws\n        parameters:\n          group: ro-group\n\n      - name: GoogleRo\n        provider: google\n        credentialRef:\n          name: google\n        parameters:\n          group: ro-access@exampleorg.com\n\n      - name: TeleportRo\n        provider: teleport\n        runAsync: false\n        credentialRef:\n          name: teleport\n        parameters:\n          group: ro-role\n\n  - name: AWS Power Manager\n    description: Access to OrgAdmin, IAMManager, Billing roles\n    approvalRuleRef:\n      name: SRE approvers\n    tags:\n      - sre\n    providers:\n      - name: AwsBilling\n        provider: aws\n        runAsync: false\n        credentialRef:\n          name: aws\n        parameters:\n          group: Billing\n\n      - name: AwsIamManager\n        provider: aws\n        runAsync: false\n        credentialRef:\n          name: aws\n        parameters:\n          group: ExampleOrgIAMManager\n</code></pre>"},{"location":"configuration/Database/","title":"Database","text":""},{"location":"configuration/Database/#overview","title":"Overview","text":"<p>Database connection is configured in the <code>db</code> section of config file.</p> <p>Currently supported databases:</p> <ul> <li>SQLite</li> <li>MySQL</li> <li>PostgreSQL</li> </ul>"},{"location":"configuration/Database/#sqlite","title":"SQLite","text":"<p>To use SQLite specify <code>sqlite</code> in <code>db.engine</code> configuration parameter.</p> <p>Example config: <pre><code>db:\n  engine: sqlite\n  filename: gorm.db\n</code></pre></p>"},{"location":"configuration/Database/#engine","title":"engine","text":"<p><code>sqlite</code> to use SQLite database</p>"},{"location":"configuration/Database/#filename","title":"filename","text":"<p>You can also override database file path if needed.</p>"},{"location":"configuration/Database/#mysql","title":"MySQL","text":"<p>Example config: <pre><code>db:\n  engine: mysql\n  mysql:\n    host: 127.0.0.1\n    port: 3306\n    username: admin\n    password: changeme\n    database: passage\n</code></pre></p>"},{"location":"configuration/Database/#engine_1","title":"engine","text":"<p><code>mysql</code> to use MySQL database</p>"},{"location":"configuration/Database/#mysqlhost","title":"mysql.host","text":"<p>Hostname of MySQL server instance</p>"},{"location":"configuration/Database/#mysqlport","title":"mysql.port","text":"<p>Port of MySQL server</p>"},{"location":"configuration/Database/#mysqlusername","title":"mysql.username","text":"<p>Username to use when connecting to MySQL server</p>"},{"location":"configuration/Database/#mysqlpassword","title":"mysql.password","text":"<p>Password to use when connecting to MySQL server</p>"},{"location":"configuration/Database/#mysqldatabase","title":"mysql.database","text":"<p>Database name</p>"},{"location":"configuration/Database/#postgresql","title":"PostgreSQL","text":"<p>Example config: <pre><code>db:\n  engine: psql\n  mysql:\n    host: 127.0.0.1\n    port: 3306\n    username: admin\n    password: changeme\n    database: passage\n    schema: public\n</code></pre></p>"},{"location":"configuration/Database/#engine_2","title":"engine","text":"<p><code>psql</code> to use PostgreSQL database</p>"},{"location":"configuration/Database/#psqlhost","title":"psql.host","text":"<p>Hostname of PostgreSQL server instance</p>"},{"location":"configuration/Database/#psqlport","title":"psql.port","text":"<p>Port of PostgreSQL server</p>"},{"location":"configuration/Database/#psqlusername","title":"psql.username","text":"<p>Username to use when connecting to PostgreSQL server</p>"},{"location":"configuration/Database/#psqlpassword","title":"psql.password","text":"<p>Password to use when connecting to PostgreSQL server</p>"},{"location":"configuration/Database/#psqldatabase","title":"psql.database","text":"<p>Database name</p>"},{"location":"configuration/Database/#psqlschema","title":"psql.schema","text":"<p>Schema name</p>"},{"location":"configuration/providers/aws/","title":"AWS","text":""},{"location":"configuration/providers/aws/#overview","title":"Overview","text":"<p>Passage Server supports AWS Identity Center (formerly AWS SSO) for access management. This guide explains how to configure and use the AWS provider.</p>"},{"location":"configuration/providers/aws/#configuration","title":"Configuration","text":""},{"location":"configuration/providers/aws/#example-role","title":"Example Role","text":"<p>AWS provider can be directly used in providers section of your defined role. Example: <pre><code>roles:\n  - name: SRE Power User Access\n    description: Privilleged access. Provides PU access to AWS\n    approvalRuleRef:\n      name: SRE approvers\n    tags:\n      - sre\n    providers:\n      - name: AwsPu\n        provider: aws\n        runAsync: true\n        credentialRef:\n          name: aws\n        parameters:\n          group: pu-group\n</code></pre></p>"},{"location":"configuration/providers/aws/#creds","title":"Creds","text":"<p>To enable the AWS provider, update the Passage Server configuration file:</p> <p>Provider needs the minimal <code>creds</code> configuration: <pre><code>creds:\n  aws:\n    data:\n      accesskeyid: xxxxxxxxxxxx\n      secretaccesskey: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n      identitystoreid: d-xxxxxxx\n      instancearn: arn:aws:sso:::instance/ssoins-xxxxxxxx\n      region: eu-central-1\n</code></pre></p>"},{"location":"configuration/providers/aws/#accesskeyid","title":"accesskeyid","text":"<p>access key id of a dedicated user</p>"},{"location":"configuration/providers/aws/#secretaccesskey","title":"secretaccesskey","text":"<p>secret access key of a dedicated user</p>"},{"location":"configuration/providers/aws/#identitystoreid","title":"identitystoreid","text":"<p>The Identity Store ID is unique to your AWS organization and is tied to AWS Identity Center.</p> <ol> <li>Log in to the AWS Management Console.</li> <li>Navigate to AWS Identity Center (search for \"Identity Center\" in the Services section).</li> <li>In the left-hand menu, go to Settings.</li> <li>Scroll down to the Identity Source section</li> </ol>"},{"location":"configuration/providers/aws/#instancearn","title":"instancearn","text":"<p>The Instance ARN refers to the ARN of the AWS Identity Center instance.</p> <ol> <li>Open your terminal and execute the following AWS CLI command:    ```bash    aws sso-admin list-instances</li> </ol>"},{"location":"configuration/providers/aws/#region","title":"region","text":"<p>Region of your Identity center instance</p>"},{"location":"configuration/providers/github/","title":"Github","text":""},{"location":"configuration/providers/github/#overview","title":"Overview","text":"<p>Passage Server supports managing Github Organisation members &amp; role assignments</p>"},{"location":"configuration/providers/github/#configuration","title":"Configuration","text":""},{"location":"configuration/providers/github/#example-role-adding-user-to-org","title":"Example role - adding user to org","text":"<pre><code>roles:\n  - name:  SRE Power User Access\n    description: Allows access to monitoring systems\n    approvalRuleRef:\n      name: SRE approvers\n    tags:\n      - sre\n    providers:\n      - name: Github\n        provider: github\n        runAsync: true\n        credentialRef:\n          name: github\n        parameters:\n          org: example\n          role: member\n          removeUser: false\n          orgRoles:\n          - all_repo_read \n          teams: |\n            cto2bprimary: member\n          repositories: |\n            office-supplies-tracker: member        \n</code></pre>"},{"location":"configuration/providers/github/#example-role-external-collaborator","title":"Example role - external collaborator","text":"<pre><code>roles:\n  - name:  SRE Power User Access\n    description: Allows access to monitoring systems\n    approvalRuleRef:\n      name: SRE approvers\n    tags:\n      - sre\n    providers:\n      - name: Github\n        provider: github\n        runAsync: true\n        credentialRef:\n          name: github\n        parameters:\n          org: example\n          repositories: |\n            office-supplies-tracker: member        \n</code></pre>"},{"location":"configuration/providers/github/#org","title":"org","text":"<p>Required. GitHub organization name.</p>"},{"location":"configuration/providers/github/#role","title":"role","text":"<p>GitHub organization membership role (member or admin). Required in case <code>orgRoles</code>, <code>teams</code> or <code>role</code> are set.</p>"},{"location":"configuration/providers/github/#removeuser","title":"removeUser","text":"<p>If \"true\", the user will be removed from the org when access is revoked.</p>"},{"location":"configuration/providers/github/#orgroles","title":"orgRoles","text":"<p>List of organization roles to assign to the user. Example: all_repo_read.</p>"},{"location":"configuration/providers/github/#teams","title":"teams","text":"<p>Key-value map of GitHub teams and roles. Example: team-name: member or team-name: maintainer.</p>"},{"location":"configuration/providers/github/#repositories","title":"repositories","text":"<p>Key-value map of repositories and roles. Example: repo-name: admin. If <code>role</code> is not set, user will not be added to the Github org, but be granted direct access to repository as external collaborator</p>"},{"location":"configuration/providers/github/#creds","title":"Creds","text":"<p>To enable the GitHub provider, you must configure credentials in the Passage Server configuration file.</p> <p>Provider needs the minimal <code>creds</code> configuration: <pre><code>creds:\n  github:\n    data:\n      appid: xxxx\n      privatekeypath: creds/github-org-example-private-key    \n</code></pre></p>"},{"location":"configuration/providers/github/#appid","title":"appid","text":"<p>GitHub App ID</p>"},{"location":"configuration/providers/github/#privatekeypath","title":"privatekeypath","text":"<p>Path to the private key file for the GitHub App</p>"},{"location":"configuration/providers/teleport/","title":"Teleport","text":""},{"location":"configuration/providers/teleport/#overview","title":"Overview","text":"<p>Passage Server supports managing Teleport roles &amp; role assignment to users</p>"},{"location":"configuration/providers/teleport/#configuration","title":"Configuration","text":""},{"location":"configuration/providers/teleport/#example-role","title":"Example Role","text":"<p>AWS provider can be directly used in providers section of your defined role. Example: <pre><code>roles:\n  - name:  SRE Power User Access\n    description: Allows access to monitoring systems\n    approvalRuleRef:\n      name: SRE approvers\n    tags:\n      - sre\n    providers:\n      - name: Teleport\n        provider: teleport\n        runAsync: true\n        credentialRef:\n          name: teleport\n        parameters:\n          group: sre-pu-teleport\n          groupDefinition: |\n            spec:\n              allow:\n                app_labels:\n                  type:\n                  - argocd\n                kubernetes_groups:\n                - system:masters      \n                kubernetes_labels:\n                  stage: dev\n                kubernetes_resources:\n                - kind: '*'\n                  name: '*'\n                  namespace: '*'\n                  verbs: ['*']          \n</code></pre></p>"},{"location":"configuration/providers/teleport/#group","title":"group","text":"<p>Teleport role name. Can contain multiple roles, comma separated e.g. <code>access,editor,auditor</code></p>"},{"location":"configuration/providers/teleport/#groupdefinition","title":"groupDefinition","text":"<p>Teleport role spec (optional)****. Does not work when multiple roles are defined inside <code>group</code> parameter</p>"},{"location":"configuration/providers/teleport/#creds","title":"Creds","text":"<p>To enable the Teleport provider, update the Passage Server configuration file:</p> <p>Provider needs the minimal <code>creds</code> configuration: <pre><code>creds:\n  teleport:\n    data:\n      credentialsfile: creds/teleport-identity-file\n      hostname: teleport.example.com\n</code></pre></p>"},{"location":"configuration/providers/teleport/#credentialsfile","title":"credentialsfile","text":"<p>Create a user who can add/remove roles to users and create/update roles. For example built-in role <code>editor</code>.</p> <p>To create an user <code>tctl</code> can be user: <pre><code>tctl users add api-admin --roles editor\n</code></pre></p> <p>To obtain credentials file: <pre><code>tctl auth sign --user=api-admin -o output-identity --tar\n</code></pre></p> <p>Create a K8s secret, which will be mounted to passage server pod: <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  name: teleport-identity-file\ntype: Opaque\nstringData:\n  teleport-identity-file: |-\n    -----BEGIN RSA PRIVATE KEY-----\n    ...\n</code></pre></p> <p>Take the glance at the lines <pre><code>    -----END RSA PRIVATE KEY-----\n    ssh-rsa-cert-v01@openssh.com \n    XXXXXNBASADS...\n    ...\n    ...\n    -----END CERTIFICATE-----\n    @cert-authority teleport.example.com .., ssh-rsa\n    XXXXXNBASADS...  \n    type=host  \n</code></pre></p> <p>Those should be in a single line like this: <pre><code>    -----END RSA PRIVATE KEY-----\n    ssh-rsa-cert-v01@openssh.com XXXXXNBASADS...\n    ...\n    ...\n    -----END CERTIFICATE-----\n    @cert-authority teleport.example.com .., ssh-rsa XXXXXNBASADS... type=host  \n</code></pre></p>"},{"location":"configuration/providers/teleport/#hostanme","title":"hostanme","text":"<p>Address of Teleport proxy server.</p>"}]}